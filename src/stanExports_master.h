// Generated by rstantools.  Do not edit by hand.

/*
    BIGEER is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BIGEER is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BIGEER.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_master_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_master");
    reader.add_event(245, 243, "end", "model_master");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
ragged_vec(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
               const std::vector<std::vector<int> >& bin, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("out", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> out(num_elements(x));
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 12;
        int ind(0);
        (void) ind;  // dummy to suppress unused var warning
        stan::math::fill(ind, std::numeric_limits<int>::min());
        current_statement_begin__ = 14;
        stan::math::assign(ind, 1);
        current_statement_begin__ = 15;
        for (int i = 1; i <= size(x); ++i) {
            current_statement_begin__ = 16;
            for (int t = 1; t <= num_elements(get_base1(x, 1, "x", 1)); ++t) {
                current_statement_begin__ = 17;
                if (as_bool(logical_eq(get_base1(get_base1(bin, i, "bin", 1), t, "bin", 2), 1))) {
                    current_statement_begin__ = 18;
                    stan::model::assign(out, 
                                stan::model::cons_list(stan::model::index_uni(ind), stan::model::nil_index_list()), 
                                get_base1(get_base1(x, i, "x", 1), t, "x", 2), 
                                "assigning variable out");
                    current_statement_begin__ = 19;
                    stan::math::assign(ind, (ind + 1));
                }
            }
        }
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(out, stan::model::cons_list(stan::model::index_min_max(1, (ind - 1)), stan::model::nil_index_list()), "out"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ragged_vec_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x,
               const std::vector<std::vector<int> >& bin, std::ostream* pstream__) const {
        return ragged_vec(x, bin, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
ragged_row(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
               const std::vector<std::vector<int> >& bin, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 29;
        validate_non_negative_index("out", "num_elements(bin)", num_elements(bin));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> out(num_elements(bin));
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 30;
        int ind(0);
        (void) ind;  // dummy to suppress unused var warning
        stan::math::fill(ind, std::numeric_limits<int>::min());
        current_statement_begin__ = 32;
        stan::math::assign(ind, 0);
        current_statement_begin__ = 33;
        for (int i = 1; i <= size(bin); ++i) {
            current_statement_begin__ = 34;
            for (int t = 1; t <= num_elements(get_base1(bin, 1, "bin", 1)); ++t) {
                current_statement_begin__ = 35;
                if (as_bool(logical_eq(get_base1(get_base1(bin, i, "bin", 1), t, "bin", 2), 1))) {
                    current_statement_begin__ = 36;
                    stan::math::assign(ind, (ind + 1));
                    current_statement_begin__ = 37;
                    stan::model::assign(out, 
                                stan::model::cons_list(stan::model::index_uni(ind), stan::model::nil_index_list()), 
                                get_base1(x, t, "x", 1), 
                                "assigning variable out");
                }
            }
        }
        current_statement_begin__ = 41;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(out, stan::model::cons_list(stan::model::index_min_max(1, ind), stan::model::nil_index_list()), "out"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ragged_row_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
               const std::vector<std::vector<int> >& bin, std::ostream* pstream__) const {
        return ragged_row(x, bin, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
ragged_col(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
               const std::vector<std::vector<int> >& bin, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 46;
        validate_non_negative_index("out", "num_elements(bin)", num_elements(bin));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> out(num_elements(bin));
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 47;
        int ind(0);
        (void) ind;  // dummy to suppress unused var warning
        stan::math::fill(ind, std::numeric_limits<int>::min());
        current_statement_begin__ = 49;
        stan::math::assign(ind, 0);
        current_statement_begin__ = 50;
        for (int i = 1; i <= size(bin); ++i) {
            current_statement_begin__ = 51;
            for (int t = 1; t <= num_elements(get_base1(bin, 1, "bin", 1)); ++t) {
                current_statement_begin__ = 52;
                if (as_bool(logical_eq(get_base1(get_base1(bin, i, "bin", 1), t, "bin", 2), 1))) {
                    current_statement_begin__ = 53;
                    stan::math::assign(ind, (ind + 1));
                    current_statement_begin__ = 54;
                    stan::model::assign(out, 
                                stan::model::cons_list(stan::model::index_uni(ind), stan::model::nil_index_list()), 
                                get_base1(x, i, "x", 1), 
                                "assigning variable out");
                }
            }
        }
        current_statement_begin__ = 58;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(out, stan::model::cons_list(stan::model::index_min_max(1, ind), stan::model::nil_index_list()), "out"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ragged_col_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
               const std::vector<std::vector<int> >& bin, std::ostream* pstream__) const {
        return ragged_col(x, bin, pstream__);
    }
};
std::vector<int>
commoninds(const std::vector<std::vector<int> >& bin1,
               const std::vector<std::vector<int> >& bin2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 63;
        validate_non_negative_index("out", "num_elements(bin1)", num_elements(bin1));
        std::vector<int  > out(num_elements(bin1), int(0));
        stan::math::fill(out, std::numeric_limits<int>::min());
        current_statement_begin__ = 64;
        validate_non_negative_index("vecinds", "size(bin1)", size(bin1));
        validate_non_negative_index("vecinds", "num_elements(get_base1(bin1, 1, \"bin1\", 1))", num_elements(get_base1(bin1, 1, "bin1", 1)));
        std::vector<std::vector<int  >  > vecinds(size(bin1), std::vector<int>(num_elements(get_base1(bin1, 1, "bin1", 1)), int(0)));
        stan::math::fill(vecinds, std::numeric_limits<int>::min());
        current_statement_begin__ = 65;
        int ctr(0);
        (void) ctr;  // dummy to suppress unused var warning
        stan::math::fill(ctr, std::numeric_limits<int>::min());
        current_statement_begin__ = 66;
        int ind(0);
        (void) ind;  // dummy to suppress unused var warning
        stan::math::fill(ind, std::numeric_limits<int>::min());
        current_statement_begin__ = 68;
        stan::math::assign(ctr, 0);
        current_statement_begin__ = 69;
        for (int i = 1; i <= size(bin1); ++i) {
            current_statement_begin__ = 70;
            for (int t = 1; t <= num_elements(get_base1(bin1, 1, "bin1", 1)); ++t) {
                current_statement_begin__ = 71;
                if (as_bool(logical_eq(get_base1(get_base1(bin1, i, "bin1", 1), t, "bin1", 2), 1))) {
                    current_statement_begin__ = 72;
                    stan::math::assign(ctr, (ctr + 1));
                    current_statement_begin__ = 73;
                    stan::model::assign(vecinds, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                ctr, 
                                "assigning variable vecinds");
                }
            }
        }
        current_statement_begin__ = 78;
        stan::math::assign(ind, 0);
        current_statement_begin__ = 79;
        for (int i = 1; i <= size(vecinds); ++i) {
            current_statement_begin__ = 80;
            for (int t = 1; t <= size(get_base1(vecinds, 1, "vecinds", 1)); ++t) {
                current_statement_begin__ = 81;
                if (as_bool(logical_eq(get_base1(get_base1(bin2, i, "bin2", 1), t, "bin2", 2), 1))) {
                    current_statement_begin__ = 82;
                    stan::math::assign(ind, (ind + 1));
                    current_statement_begin__ = 83;
                    stan::model::assign(out, 
                                stan::model::cons_list(stan::model::index_uni(ind), stan::model::nil_index_list()), 
                                get_base1(get_base1(vecinds, i, "vecinds", 1), t, "vecinds", 2), 
                                "assigning variable out");
                }
            }
        }
        current_statement_begin__ = 87;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(out, stan::model::cons_list(stan::model::index_min_max(1, ind), stan::model::nil_index_list()), "out"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct commoninds_functor__ {
            std::vector<int>
    operator()(const std::vector<std::vector<int> >& bin1,
               const std::vector<std::vector<int> >& bin2, std::ostream* pstream__) const {
        return commoninds(bin1, bin2, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_master : public prob_grad {
private:
        int inc;
        int meas_err;
        int nx;
        int nt;
        int ntot_man;
        std::vector<std::vector<int> > hasdat;
        std::vector<vector_d> Wobs;
        std::vector<vector_d> Sobs;
        std::vector<vector_d> dAobs;
        vector_d dA_shift;
        double Serr_sd;
        double Werr_sd;
        double dAerr_sd;
        double lowerbound_A0;
        double upperbound_A0;
        double upperbound_logk;
        double lowerbound_logk;
        double upperbound_logn;
        double lowerbound_logn;
        std::vector<vector_d> sigma_post;
        vector_d logk_hat;
        std::vector<double> logA0_hat;
        std::vector<double> logn_hat;
        vector_d logk_sd;
        std::vector<double> logA0_sd;
        std::vector<double> logn_sd;
        std::vector<vector_d> dApos_array;
        vector_d Wobsvec_man;
        vector_d Sobsvec_man;
        vector_d logWobs_man;
        vector_d logSobs_man;
        vector_d dApos_obs;
        vector_d sigmavec_man;
        int ntot_w;
public:
    model_master(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_master(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_master_namespace::model_master";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "inc", "int", context__.to_vec());
            inc = int(0);
            vals_i__ = context__.vals_i("inc");
            pos__ = 0;
            inc = vals_i__[pos__++];
            check_greater_or_equal(function__, "inc", inc, 0);
            check_less_or_equal(function__, "inc", inc, 1);
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "meas_err", "int", context__.to_vec());
            meas_err = int(0);
            vals_i__ = context__.vals_i("meas_err");
            pos__ = 0;
            meas_err = vals_i__[pos__++];
            check_greater_or_equal(function__, "meas_err", meas_err, 0);
            check_less_or_equal(function__, "meas_err", meas_err, 1);
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "nx", "int", context__.to_vec());
            nx = int(0);
            vals_i__ = context__.vals_i("nx");
            pos__ = 0;
            nx = vals_i__[pos__++];
            check_greater_or_equal(function__, "nx", nx, 0);
            current_statement_begin__ = 100;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 0);
            current_statement_begin__ = 101;
            context__.validate_dims("data initialization", "ntot_man", "int", context__.to_vec());
            ntot_man = int(0);
            vals_i__ = context__.vals_i("ntot_man");
            pos__ = 0;
            ntot_man = vals_i__[pos__++];
            check_greater_or_equal(function__, "ntot_man", ntot_man, 0);
            current_statement_begin__ = 104;
            validate_non_negative_index("hasdat", "nx", nx);
            validate_non_negative_index("hasdat", "nt", nt);
            context__.validate_dims("data initialization", "hasdat", "int", context__.to_vec(nx,nt));
            hasdat = std::vector<std::vector<int> >(nx, std::vector<int>(nt, int(0)));
            vals_i__ = context__.vals_i("hasdat");
            pos__ = 0;
            size_t hasdat_k_0_max__ = nx;
            size_t hasdat_k_1_max__ = nt;
            for (size_t k_1__ = 0; k_1__ < hasdat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < hasdat_k_0_max__; ++k_0__) {
                    hasdat[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t hasdat_i_0_max__ = nx;
            size_t hasdat_i_1_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < hasdat_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < hasdat_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "hasdat[i_0__][i_1__]", hasdat[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "hasdat[i_0__][i_1__]", hasdat[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 107;
            validate_non_negative_index("Wobs", "nt", nt);
            validate_non_negative_index("Wobs", "nx", nx);
            context__.validate_dims("data initialization", "Wobs", "vector_d", context__.to_vec(nx,nt));
            Wobs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(nx, Eigen::Matrix<double, Eigen::Dynamic, 1>(nt));
            vals_r__ = context__.vals_r("Wobs");
            pos__ = 0;
            size_t Wobs_j_1_max__ = nt;
            size_t Wobs_k_0_max__ = nx;
            for (size_t j_1__ = 0; j_1__ < Wobs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Wobs_k_0_max__; ++k_0__) {
                    Wobs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 108;
            validate_non_negative_index("Sobs", "nt", nt);
            validate_non_negative_index("Sobs", "nx", nx);
            context__.validate_dims("data initialization", "Sobs", "vector_d", context__.to_vec(nx,nt));
            Sobs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(nx, Eigen::Matrix<double, Eigen::Dynamic, 1>(nt));
            vals_r__ = context__.vals_r("Sobs");
            pos__ = 0;
            size_t Sobs_j_1_max__ = nt;
            size_t Sobs_k_0_max__ = nx;
            for (size_t j_1__ = 0; j_1__ < Sobs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Sobs_k_0_max__; ++k_0__) {
                    Sobs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 109;
            validate_non_negative_index("dAobs", "nt", nt);
            validate_non_negative_index("dAobs", "nx", nx);
            context__.validate_dims("data initialization", "dAobs", "vector_d", context__.to_vec(nx,nt));
            dAobs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(nx, Eigen::Matrix<double, Eigen::Dynamic, 1>(nt));
            vals_r__ = context__.vals_r("dAobs");
            pos__ = 0;
            size_t dAobs_j_1_max__ = nt;
            size_t dAobs_k_0_max__ = nx;
            for (size_t j_1__ = 0; j_1__ < dAobs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < dAobs_k_0_max__; ++k_0__) {
                    dAobs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 110;
            validate_non_negative_index("dA_shift", "nx", nx);
            context__.validate_dims("data initialization", "dA_shift", "vector_d", context__.to_vec(nx));
            dA_shift = Eigen::Matrix<double, Eigen::Dynamic, 1>(nx);
            vals_r__ = context__.vals_r("dA_shift");
            pos__ = 0;
            size_t dA_shift_j_1_max__ = nx;
            for (size_t j_1__ = 0; j_1__ < dA_shift_j_1_max__; ++j_1__) {
                dA_shift(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 112;
            context__.validate_dims("data initialization", "Serr_sd", "double", context__.to_vec());
            Serr_sd = double(0);
            vals_r__ = context__.vals_r("Serr_sd");
            pos__ = 0;
            Serr_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "Serr_sd", Serr_sd, 0);
            current_statement_begin__ = 113;
            context__.validate_dims("data initialization", "Werr_sd", "double", context__.to_vec());
            Werr_sd = double(0);
            vals_r__ = context__.vals_r("Werr_sd");
            pos__ = 0;
            Werr_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "Werr_sd", Werr_sd, 0);
            current_statement_begin__ = 114;
            context__.validate_dims("data initialization", "dAerr_sd", "double", context__.to_vec());
            dAerr_sd = double(0);
            vals_r__ = context__.vals_r("dAerr_sd");
            pos__ = 0;
            dAerr_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "dAerr_sd", dAerr_sd, 0);
            current_statement_begin__ = 117;
            context__.validate_dims("data initialization", "lowerbound_A0", "double", context__.to_vec());
            lowerbound_A0 = double(0);
            vals_r__ = context__.vals_r("lowerbound_A0");
            pos__ = 0;
            lowerbound_A0 = vals_r__[pos__++];
            current_statement_begin__ = 118;
            context__.validate_dims("data initialization", "upperbound_A0", "double", context__.to_vec());
            upperbound_A0 = double(0);
            vals_r__ = context__.vals_r("upperbound_A0");
            pos__ = 0;
            upperbound_A0 = vals_r__[pos__++];
            current_statement_begin__ = 119;
            context__.validate_dims("data initialization", "upperbound_logk", "double", context__.to_vec());
            upperbound_logk = double(0);
            vals_r__ = context__.vals_r("upperbound_logk");
            pos__ = 0;
            upperbound_logk = vals_r__[pos__++];
            current_statement_begin__ = 120;
            context__.validate_dims("data initialization", "lowerbound_logk", "double", context__.to_vec());
            lowerbound_logk = double(0);
            vals_r__ = context__.vals_r("lowerbound_logk");
            pos__ = 0;
            lowerbound_logk = vals_r__[pos__++];
            current_statement_begin__ = 121;
            context__.validate_dims("data initialization", "upperbound_logn", "double", context__.to_vec());
            upperbound_logn = double(0);
            vals_r__ = context__.vals_r("upperbound_logn");
            pos__ = 0;
            upperbound_logn = vals_r__[pos__++];
            current_statement_begin__ = 122;
            context__.validate_dims("data initialization", "lowerbound_logn", "double", context__.to_vec());
            lowerbound_logn = double(0);
            vals_r__ = context__.vals_r("lowerbound_logn");
            pos__ = 0;
            lowerbound_logn = vals_r__[pos__++];
            current_statement_begin__ = 125;
            validate_non_negative_index("sigma_post", "nt", nt);
            validate_non_negative_index("sigma_post", "nx", nx);
            context__.validate_dims("data initialization", "sigma_post", "vector_d", context__.to_vec(nx,nt));
            sigma_post = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(nx, Eigen::Matrix<double, Eigen::Dynamic, 1>(nt));
            vals_r__ = context__.vals_r("sigma_post");
            pos__ = 0;
            size_t sigma_post_j_1_max__ = nt;
            size_t sigma_post_k_0_max__ = nx;
            for (size_t j_1__ = 0; j_1__ < sigma_post_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_post_k_0_max__; ++k_0__) {
                    sigma_post[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            size_t sigma_post_i_0_max__ = nx;
            for (size_t i_0__ = 0; i_0__ < sigma_post_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_post[i_0__]", sigma_post[i_0__], 0);
            }
            current_statement_begin__ = 128;
            validate_non_negative_index("logk_hat", "nt", nt);
            context__.validate_dims("data initialization", "logk_hat", "vector_d", context__.to_vec(nt));
            logk_hat = Eigen::Matrix<double, Eigen::Dynamic, 1>(nt);
            vals_r__ = context__.vals_r("logk_hat");
            pos__ = 0;
            size_t logk_hat_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < logk_hat_j_1_max__; ++j_1__) {
                logk_hat(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 129;
            validate_non_negative_index("logA0_hat", "nx", nx);
            context__.validate_dims("data initialization", "logA0_hat", "double", context__.to_vec(nx));
            logA0_hat = std::vector<double>(nx, double(0));
            vals_r__ = context__.vals_r("logA0_hat");
            pos__ = 0;
            size_t logA0_hat_k_0_max__ = nx;
            for (size_t k_0__ = 0; k_0__ < logA0_hat_k_0_max__; ++k_0__) {
                logA0_hat[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 130;
            validate_non_negative_index("logn_hat", "nx", nx);
            context__.validate_dims("data initialization", "logn_hat", "double", context__.to_vec(nx));
            logn_hat = std::vector<double>(nx, double(0));
            vals_r__ = context__.vals_r("logn_hat");
            pos__ = 0;
            size_t logn_hat_k_0_max__ = nx;
            for (size_t k_0__ = 0; k_0__ < logn_hat_k_0_max__; ++k_0__) {
                logn_hat[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 132;
            validate_non_negative_index("logk_sd", "nt", nt);
            context__.validate_dims("data initialization", "logk_sd", "vector_d", context__.to_vec(nt));
            logk_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(nt);
            vals_r__ = context__.vals_r("logk_sd");
            pos__ = 0;
            size_t logk_sd_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < logk_sd_j_1_max__; ++j_1__) {
                logk_sd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "logk_sd", logk_sd, 0);
            current_statement_begin__ = 133;
            validate_non_negative_index("logA0_sd", "nx", nx);
            context__.validate_dims("data initialization", "logA0_sd", "double", context__.to_vec(nx));
            logA0_sd = std::vector<double>(nx, double(0));
            vals_r__ = context__.vals_r("logA0_sd");
            pos__ = 0;
            size_t logA0_sd_k_0_max__ = nx;
            for (size_t k_0__ = 0; k_0__ < logA0_sd_k_0_max__; ++k_0__) {
                logA0_sd[k_0__] = vals_r__[pos__++];
            }
            size_t logA0_sd_i_0_max__ = nx;
            for (size_t i_0__ = 0; i_0__ < logA0_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "logA0_sd[i_0__]", logA0_sd[i_0__], 0);
            }
            current_statement_begin__ = 134;
            validate_non_negative_index("logn_sd", "nx", nx);
            context__.validate_dims("data initialization", "logn_sd", "double", context__.to_vec(nx));
            logn_sd = std::vector<double>(nx, double(0));
            vals_r__ = context__.vals_r("logn_sd");
            pos__ = 0;
            size_t logn_sd_k_0_max__ = nx;
            for (size_t k_0__ = 0; k_0__ < logn_sd_k_0_max__; ++k_0__) {
                logn_sd[k_0__] = vals_r__[pos__++];
            }
            size_t logn_sd_i_0_max__ = nx;
            for (size_t i_0__ = 0; i_0__ < logn_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "logn_sd[i_0__]", logn_sd[i_0__], 0);
            }
            // initialize transformed data variables
            current_statement_begin__ = 141;
            validate_non_negative_index("dApos_array", "nt", nt);
            validate_non_negative_index("dApos_array", "nx", nx);
            dApos_array = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(nx, Eigen::Matrix<double, Eigen::Dynamic, 1>(nt));
            stan::math::fill(dApos_array, DUMMY_VAR__);
            current_statement_begin__ = 143;
            validate_non_negative_index("Wobsvec_man", "ntot_man", ntot_man);
            Wobsvec_man = Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man);
            stan::math::fill(Wobsvec_man, DUMMY_VAR__);
            current_statement_begin__ = 144;
            validate_non_negative_index("Sobsvec_man", "ntot_man", ntot_man);
            Sobsvec_man = Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man);
            stan::math::fill(Sobsvec_man, DUMMY_VAR__);
            current_statement_begin__ = 146;
            validate_non_negative_index("logWobs_man", "ntot_man", ntot_man);
            logWobs_man = Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man);
            stan::math::fill(logWobs_man, DUMMY_VAR__);
            current_statement_begin__ = 147;
            validate_non_negative_index("logSobs_man", "ntot_man", ntot_man);
            logSobs_man = Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man);
            stan::math::fill(logSobs_man, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("dApos_obs", "ntot_man", ntot_man);
            dApos_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man);
            stan::math::fill(dApos_obs, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("sigmavec_man", "ntot_man", ntot_man);
            sigmavec_man = Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man);
            stan::math::fill(sigmavec_man, DUMMY_VAR__);
            current_statement_begin__ = 151;
            ntot_w = int(0);
            stan::math::fill(ntot_w, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 152;
            stan::math::assign(ntot_w, ntot_man);
            current_statement_begin__ = 154;
            for (int i = 1; i <= nx; ++i) {
                current_statement_begin__ = 155;
                stan::model::assign(dApos_array, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            subtract(get_base1(dAobs, i, "dAobs", 1), min(get_base1(dAobs, i, "dAobs", 1))), 
                            "assigning variable dApos_array");
            }
            current_statement_begin__ = 159;
            stan::math::assign(Wobsvec_man, ragged_vec(Wobs, hasdat, pstream__));
            current_statement_begin__ = 160;
            stan::math::assign(Sobsvec_man, ragged_vec(Sobs, hasdat, pstream__));
            current_statement_begin__ = 161;
            stan::math::assign(dApos_obs, ragged_vec(dApos_array, hasdat, pstream__));
            current_statement_begin__ = 163;
            stan::math::assign(logWobs_man, stan::math::log(Wobsvec_man));
            current_statement_begin__ = 164;
            stan::math::assign(logSobs_man, stan::math::log(Sobsvec_man));
            current_statement_begin__ = 166;
            stan::math::assign(sigmavec_man, ragged_vec(sigma_post, hasdat, pstream__));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 171;
            validate_non_negative_index("logk", "nt", nt);
            num_params_r__ += nt;
            current_statement_begin__ = 172;
            validate_non_negative_index("A0", "nx", nx);
            validate_non_negative_index("A0", "inc", inc);
            num_params_r__ += (nx * inc);
            current_statement_begin__ = 173;
            validate_non_negative_index("logn", "nx", nx);
            validate_non_negative_index("logn", "inc", inc);
            num_params_r__ += (nx * inc);
            current_statement_begin__ = 175;
            validate_non_negative_index("Sact", "ntot_man", ntot_man);
            validate_non_negative_index("Sact", "(meas_err * inc)", (meas_err * inc));
            num_params_r__ += (ntot_man * (meas_err * inc));
            current_statement_begin__ = 176;
            validate_non_negative_index("Wact", "ntot_w", ntot_w);
            validate_non_negative_index("Wact", "(meas_err * inc)", (meas_err * inc));
            num_params_r__ += (ntot_w * (meas_err * inc));
            current_statement_begin__ = 177;
            validate_non_negative_index("dApos_act", "ntot_man", ntot_man);
            validate_non_negative_index("dApos_act", "(meas_err * inc)", (meas_err * inc));
            num_params_r__ += (ntot_man * (meas_err * inc));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_master() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 171;
        if (!(context__.contains_r("logk")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logk missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logk");
        pos__ = 0U;
        validate_non_negative_index("logk", "nt", nt);
        context__.validate_dims("parameter initialization", "logk", "vector_d", context__.to_vec(nt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> logk(nt);
        size_t logk_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < logk_j_1_max__; ++j_1__) {
            logk(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(lowerbound_logk, upperbound_logk, logk);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logk: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 172;
        if (!(context__.contains_r("A0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A0");
        pos__ = 0U;
        validate_non_negative_index("A0", "nx", nx);
        validate_non_negative_index("A0", "inc", inc);
        context__.validate_dims("parameter initialization", "A0", "vector_d", context__.to_vec(inc,nx));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > A0(inc, Eigen::Matrix<double, Eigen::Dynamic, 1>(nx));
        size_t A0_j_1_max__ = nx;
        size_t A0_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < A0_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < A0_k_0_max__; ++k_0__) {
                A0[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t A0_i_0_max__ = inc;
        for (size_t i_0__ = 0; i_0__ < A0_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(lowerbound_A0, upperbound_A0, A0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 173;
        if (!(context__.contains_r("logn")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logn missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logn");
        pos__ = 0U;
        validate_non_negative_index("logn", "nx", nx);
        validate_non_negative_index("logn", "inc", inc);
        context__.validate_dims("parameter initialization", "logn", "vector_d", context__.to_vec(inc,nx));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > logn(inc, Eigen::Matrix<double, Eigen::Dynamic, 1>(nx));
        size_t logn_j_1_max__ = nx;
        size_t logn_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < logn_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < logn_k_0_max__; ++k_0__) {
                logn[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t logn_i_0_max__ = inc;
        for (size_t i_0__ = 0; i_0__ < logn_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(lowerbound_logn, upperbound_logn, logn[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logn: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 175;
        if (!(context__.contains_r("Sact")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Sact missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Sact");
        pos__ = 0U;
        validate_non_negative_index("Sact", "ntot_man", ntot_man);
        validate_non_negative_index("Sact", "(meas_err * inc)", (meas_err * inc));
        context__.validate_dims("parameter initialization", "Sact", "vector_d", context__.to_vec((meas_err * inc),ntot_man));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Sact((meas_err * inc), Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man));
        size_t Sact_j_1_max__ = ntot_man;
        size_t Sact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Sact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Sact_k_0_max__; ++k_0__) {
                Sact[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t Sact_i_0_max__ = (meas_err * inc);
        for (size_t i_0__ = 0; i_0__ < Sact_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, Sact[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Sact: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 176;
        if (!(context__.contains_r("Wact")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Wact missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Wact");
        pos__ = 0U;
        validate_non_negative_index("Wact", "ntot_w", ntot_w);
        validate_non_negative_index("Wact", "(meas_err * inc)", (meas_err * inc));
        context__.validate_dims("parameter initialization", "Wact", "vector_d", context__.to_vec((meas_err * inc),ntot_w));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Wact((meas_err * inc), Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_w));
        size_t Wact_j_1_max__ = ntot_w;
        size_t Wact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Wact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Wact_k_0_max__; ++k_0__) {
                Wact[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t Wact_i_0_max__ = (meas_err * inc);
        for (size_t i_0__ = 0; i_0__ < Wact_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, Wact[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Wact: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 177;
        if (!(context__.contains_r("dApos_act")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dApos_act missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dApos_act");
        pos__ = 0U;
        validate_non_negative_index("dApos_act", "ntot_man", ntot_man);
        validate_non_negative_index("dApos_act", "(meas_err * inc)", (meas_err * inc));
        context__.validate_dims("parameter initialization", "dApos_act", "vector_d", context__.to_vec((meas_err * inc),ntot_man));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > dApos_act((meas_err * inc), Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man));
        size_t dApos_act_j_1_max__ = ntot_man;
        size_t dApos_act_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < dApos_act_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < dApos_act_k_0_max__; ++k_0__) {
                dApos_act[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t dApos_act_i_0_max__ = (meas_err * inc);
        for (size_t i_0__ = 0; i_0__ < dApos_act_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(dApos_act[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dApos_act: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 171;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logk;
            (void) logk;  // dummy to suppress unused var warning
            if (jacobian__)
                logk = in__.vector_lub_constrain(lowerbound_logk, upperbound_logk, nt, lp__);
            else
                logk = in__.vector_lub_constrain(lowerbound_logk, upperbound_logk, nt);
            current_statement_begin__ = 172;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > A0;
            size_t A0_d_0_max__ = inc;
            A0.reserve(A0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < A0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    A0.push_back(in__.vector_lub_constrain(lowerbound_A0, upperbound_A0, nx, lp__));
                else
                    A0.push_back(in__.vector_lub_constrain(lowerbound_A0, upperbound_A0, nx));
            }
            current_statement_begin__ = 173;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > logn;
            size_t logn_d_0_max__ = inc;
            logn.reserve(logn_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < logn_d_0_max__; ++d_0__) {
                if (jacobian__)
                    logn.push_back(in__.vector_lub_constrain(lowerbound_logn, upperbound_logn, nx, lp__));
                else
                    logn.push_back(in__.vector_lub_constrain(lowerbound_logn, upperbound_logn, nx));
            }
            current_statement_begin__ = 175;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > Sact;
            size_t Sact_d_0_max__ = (meas_err * inc);
            Sact.reserve(Sact_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < Sact_d_0_max__; ++d_0__) {
                if (jacobian__)
                    Sact.push_back(in__.vector_lb_constrain(0, ntot_man, lp__));
                else
                    Sact.push_back(in__.vector_lb_constrain(0, ntot_man));
            }
            current_statement_begin__ = 176;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > Wact;
            size_t Wact_d_0_max__ = (meas_err * inc);
            Wact.reserve(Wact_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < Wact_d_0_max__; ++d_0__) {
                if (jacobian__)
                    Wact.push_back(in__.vector_lb_constrain(0, ntot_w, lp__));
                else
                    Wact.push_back(in__.vector_lb_constrain(0, ntot_w));
            }
            current_statement_begin__ = 177;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > dApos_act;
            size_t dApos_act_d_0_max__ = (meas_err * inc);
            dApos_act.reserve(dApos_act_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < dApos_act_d_0_max__; ++d_0__) {
                if (jacobian__)
                    dApos_act.push_back(in__.vector_constrain(ntot_man, lp__));
                else
                    dApos_act.push_back(in__.vector_constrain(ntot_man));
            }
            // transformed parameters
            current_statement_begin__ = 183;
            validate_non_negative_index("eq_lhs", "ntot_man", ntot_man);
            validate_non_negative_index("eq_lhs", "inc", inc);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > eq_lhs(inc, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(eq_lhs, DUMMY_VAR__);
            stan::math::fill(eq_lhs, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("logA_man", "ntot_man", ntot_man);
            validate_non_negative_index("logA_man", "inc", inc);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > logA_man(inc, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(logA_man, DUMMY_VAR__);
            stan::math::fill(logA_man, DUMMY_VAR__);
            current_statement_begin__ = 185;
            validate_non_negative_index("logk_man", "ntot_man", ntot_man);
            validate_non_negative_index("logk_man", "inc", inc);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > logk_man(inc, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(logk_man, DUMMY_VAR__);
            stan::math::fill(logk_man, DUMMY_VAR__);
            current_statement_begin__ = 186;
            validate_non_negative_index("eq_rhs", "ntot_man", ntot_man);
            validate_non_negative_index("eq_rhs", "inc", inc);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > eq_rhs(inc, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(eq_rhs, DUMMY_VAR__);
            stan::math::fill(eq_rhs, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 189;
            if (as_bool(inc)) {
                current_statement_begin__ = 190;
                if (as_bool(meas_err)) {
                    current_statement_begin__ = 191;
                    stan::model::assign(logA_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                stan::math::log(add(ragged_col(get_base1(A0, 1, "A0", 1), hasdat, pstream__), get_base1(dApos_act, 1, "dApos_act", 1))), 
                                "assigning variable logA_man");
                    current_statement_begin__ = 192;
                    stan::model::assign(logk_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                ragged_row(logk, hasdat, pstream__), 
                                "assigning variable logk_man");
                    current_statement_begin__ = 199;
                    stan::model::assign(eq_lhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add((stan::math::log(62.82) + (0.4375 * stan::math::log(9.8))), multiply(0.5625, stan::math::log(get_base1(Sact, 1, "Sact", 1)))), multiply(0.7291667, stan::math::log(get_base1(Wact, 1, "Wact", 1)))), 
                                "assigning variable eq_lhs");
                    current_statement_begin__ = 200;
                    stan::model::assign(eq_rhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add(get_base1(logk_man, 1, "logk_man", 1), multiply(0.25, ragged_col(get_base1(logn, 1, "logn", 1), hasdat, pstream__))), multiply(0.7291667, get_base1(logA_man, 1, "logA_man", 1))), 
                                "assigning variable eq_rhs");
                } else {
                    current_statement_begin__ = 204;
                    stan::model::assign(logk_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                ragged_row(logk, hasdat, pstream__), 
                                "assigning variable logk_man");
                    current_statement_begin__ = 205;
                    stan::model::assign(logA_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                stan::math::log(add(ragged_col(get_base1(A0, 1, "A0", 1), hasdat, pstream__), dApos_obs)), 
                                "assigning variable logA_man");
                    current_statement_begin__ = 212;
                    stan::model::assign(eq_lhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add((stan::math::log(62.82) + (0.4375 * stan::math::log(9.8))), multiply(0.5625, logSobs_man)), multiply(0.7291667, logWobs_man)), 
                                "assigning variable eq_lhs");
                    current_statement_begin__ = 213;
                    stan::model::assign(eq_rhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add(get_base1(logk_man, 1, "logk_man", 1), multiply(0.25, ragged_col(get_base1(logn, 1, "logn", 1), hasdat, pstream__))), multiply(0.7291667, get_base1(logA_man, 1, "logA_man", 1))), 
                                "assigning variable eq_rhs");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 183;
            size_t eq_lhs_k_0_max__ = inc;
            size_t eq_lhs_j_1_max__ = ntot_man;
            for (size_t k_0__ = 0; k_0__ < eq_lhs_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < eq_lhs_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(eq_lhs[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: eq_lhs" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eq_lhs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 184;
            size_t logA_man_k_0_max__ = inc;
            size_t logA_man_j_1_max__ = ntot_man;
            for (size_t k_0__ = 0; k_0__ < logA_man_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < logA_man_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(logA_man[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: logA_man" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logA_man: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 185;
            size_t logk_man_k_0_max__ = inc;
            size_t logk_man_j_1_max__ = ntot_man;
            for (size_t k_0__ = 0; k_0__ < logk_man_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < logk_man_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(logk_man[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: logk_man" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logk_man: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 186;
            size_t eq_rhs_k_0_max__ = inc;
            size_t eq_rhs_j_1_max__ = ntot_man;
            for (size_t k_0__ = 0; k_0__ < eq_rhs_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < eq_rhs_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(eq_rhs[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: eq_rhs" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eq_rhs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 221;
            if (as_bool(inc)) {
                current_statement_begin__ = 222;
                lp_accum__.add(lognormal_log<propto__>(add(get_base1(A0, 1, "A0", 1), get_base1(dA_shift, 1, "dA_shift", 1)), logA0_hat, logA0_sd));
                current_statement_begin__ = 223;
                lp_accum__.add(normal_log<propto__>(get_base1(logn, 1, "logn", 1), logn_hat, logn_sd));
                current_statement_begin__ = 224;
                lp_accum__.add(normal_log<propto__>(get_base1(logk, 1, "logk", 1), logk_hat, logk_sd));
            }
            current_statement_begin__ = 228;
            if (as_bool(inc)) {
                current_statement_begin__ = 229;
                lp_accum__.add(normal_log<propto__>(get_base1(eq_lhs, 1, "eq_lhs", 1), get_base1(eq_rhs, 1, "eq_rhs", 1), sigmavec_man));
            }
            current_statement_begin__ = 233;
            if (as_bool(meas_err)) {
                current_statement_begin__ = 234;
                if (as_bool(inc)) {
                    current_statement_begin__ = 235;
                    lp_accum__.add(normal_log<propto__>(get_base1(Wact, 1, "Wact", 1), Wobsvec_man, Werr_sd));
                    current_statement_begin__ = 236;
                    lp_accum__.add(normal_log<propto__>(get_base1(Sact, 1, "Sact", 1), Sobsvec_man, Serr_sd));
                    current_statement_begin__ = 237;
                    lp_accum__.add(normal_log<propto__>(get_base1(dApos_act, 1, "dApos_act", 1), dApos_obs, dAerr_sd));
                    current_statement_begin__ = 239;
                    lp_accum__.add(minus(stan::math::log(get_base1(Wact, 1, "Wact", 1))));
                    current_statement_begin__ = 240;
                    lp_accum__.add(minus(stan::math::log(get_base1(Sact, 1, "Sact", 1))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("logk");
        names__.push_back("A0");
        names__.push_back("logn");
        names__.push_back("Sact");
        names__.push_back("Wact");
        names__.push_back("dApos_act");
        names__.push_back("eq_lhs");
        names__.push_back("logA_man");
        names__.push_back("logk_man");
        names__.push_back("eq_rhs");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(inc);
        dims__.push_back(nx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(inc);
        dims__.push_back(nx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((meas_err * inc));
        dims__.push_back(ntot_man);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((meas_err * inc));
        dims__.push_back(ntot_w);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((meas_err * inc));
        dims__.push_back(ntot_man);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(inc);
        dims__.push_back(ntot_man);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(inc);
        dims__.push_back(ntot_man);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(inc);
        dims__.push_back(ntot_man);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(inc);
        dims__.push_back(ntot_man);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_master_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> logk = in__.vector_lub_constrain(lowerbound_logk, upperbound_logk, nt);
        size_t logk_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < logk_j_1_max__; ++j_1__) {
            vars__.push_back(logk(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > A0;
        size_t A0_d_0_max__ = inc;
        A0.reserve(A0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < A0_d_0_max__; ++d_0__) {
            A0.push_back(in__.vector_lub_constrain(lowerbound_A0, upperbound_A0, nx));
        }
        size_t A0_j_1_max__ = nx;
        size_t A0_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < A0_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < A0_k_0_max__; ++k_0__) {
                vars__.push_back(A0[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > logn;
        size_t logn_d_0_max__ = inc;
        logn.reserve(logn_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < logn_d_0_max__; ++d_0__) {
            logn.push_back(in__.vector_lub_constrain(lowerbound_logn, upperbound_logn, nx));
        }
        size_t logn_j_1_max__ = nx;
        size_t logn_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < logn_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < logn_k_0_max__; ++k_0__) {
                vars__.push_back(logn[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Sact;
        size_t Sact_d_0_max__ = (meas_err * inc);
        Sact.reserve(Sact_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < Sact_d_0_max__; ++d_0__) {
            Sact.push_back(in__.vector_lb_constrain(0, ntot_man));
        }
        size_t Sact_j_1_max__ = ntot_man;
        size_t Sact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Sact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Sact_k_0_max__; ++k_0__) {
                vars__.push_back(Sact[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Wact;
        size_t Wact_d_0_max__ = (meas_err * inc);
        Wact.reserve(Wact_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < Wact_d_0_max__; ++d_0__) {
            Wact.push_back(in__.vector_lb_constrain(0, ntot_w));
        }
        size_t Wact_j_1_max__ = ntot_w;
        size_t Wact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Wact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Wact_k_0_max__; ++k_0__) {
                vars__.push_back(Wact[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > dApos_act;
        size_t dApos_act_d_0_max__ = (meas_err * inc);
        dApos_act.reserve(dApos_act_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < dApos_act_d_0_max__; ++d_0__) {
            dApos_act.push_back(in__.vector_constrain(ntot_man));
        }
        size_t dApos_act_j_1_max__ = ntot_man;
        size_t dApos_act_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < dApos_act_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < dApos_act_k_0_max__; ++k_0__) {
                vars__.push_back(dApos_act[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 183;
            validate_non_negative_index("eq_lhs", "ntot_man", ntot_man);
            validate_non_negative_index("eq_lhs", "inc", inc);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > eq_lhs(inc, Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(eq_lhs, DUMMY_VAR__);
            stan::math::fill(eq_lhs, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("logA_man", "ntot_man", ntot_man);
            validate_non_negative_index("logA_man", "inc", inc);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > logA_man(inc, Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(logA_man, DUMMY_VAR__);
            stan::math::fill(logA_man, DUMMY_VAR__);
            current_statement_begin__ = 185;
            validate_non_negative_index("logk_man", "ntot_man", ntot_man);
            validate_non_negative_index("logk_man", "inc", inc);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > logk_man(inc, Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(logk_man, DUMMY_VAR__);
            stan::math::fill(logk_man, DUMMY_VAR__);
            current_statement_begin__ = 186;
            validate_non_negative_index("eq_rhs", "ntot_man", ntot_man);
            validate_non_negative_index("eq_rhs", "inc", inc);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > eq_rhs(inc, Eigen::Matrix<double, Eigen::Dynamic, 1>(ntot_man));
            stan::math::initialize(eq_rhs, DUMMY_VAR__);
            stan::math::fill(eq_rhs, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 189;
            if (as_bool(inc)) {
                current_statement_begin__ = 190;
                if (as_bool(meas_err)) {
                    current_statement_begin__ = 191;
                    stan::model::assign(logA_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                stan::math::log(add(ragged_col(get_base1(A0, 1, "A0", 1), hasdat, pstream__), get_base1(dApos_act, 1, "dApos_act", 1))), 
                                "assigning variable logA_man");
                    current_statement_begin__ = 192;
                    stan::model::assign(logk_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                ragged_row(logk, hasdat, pstream__), 
                                "assigning variable logk_man");
                    current_statement_begin__ = 199;
                    stan::model::assign(eq_lhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add((stan::math::log(62.82) + (0.4375 * stan::math::log(9.8))), multiply(0.5625, stan::math::log(get_base1(Sact, 1, "Sact", 1)))), multiply(0.7291667, stan::math::log(get_base1(Wact, 1, "Wact", 1)))), 
                                "assigning variable eq_lhs");
                    current_statement_begin__ = 200;
                    stan::model::assign(eq_rhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add(get_base1(logk_man, 1, "logk_man", 1), multiply(0.25, ragged_col(get_base1(logn, 1, "logn", 1), hasdat, pstream__))), multiply(0.7291667, get_base1(logA_man, 1, "logA_man", 1))), 
                                "assigning variable eq_rhs");
                } else {
                    current_statement_begin__ = 204;
                    stan::model::assign(logk_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                ragged_row(logk, hasdat, pstream__), 
                                "assigning variable logk_man");
                    current_statement_begin__ = 205;
                    stan::model::assign(logA_man, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                stan::math::log(add(ragged_col(get_base1(A0, 1, "A0", 1), hasdat, pstream__), dApos_obs)), 
                                "assigning variable logA_man");
                    current_statement_begin__ = 212;
                    stan::model::assign(eq_lhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add((stan::math::log(62.82) + (0.4375 * stan::math::log(9.8))), multiply(0.5625, logSobs_man)), multiply(0.7291667, logWobs_man)), 
                                "assigning variable eq_lhs");
                    current_statement_begin__ = 213;
                    stan::model::assign(eq_rhs, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                subtract(add(get_base1(logk_man, 1, "logk_man", 1), multiply(0.25, ragged_col(get_base1(logn, 1, "logn", 1), hasdat, pstream__))), multiply(0.7291667, get_base1(logA_man, 1, "logA_man", 1))), 
                                "assigning variable eq_rhs");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t eq_lhs_j_1_max__ = ntot_man;
                size_t eq_lhs_k_0_max__ = inc;
                for (size_t j_1__ = 0; j_1__ < eq_lhs_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < eq_lhs_k_0_max__; ++k_0__) {
                        vars__.push_back(eq_lhs[k_0__](j_1__));
                    }
                }
                size_t logA_man_j_1_max__ = ntot_man;
                size_t logA_man_k_0_max__ = inc;
                for (size_t j_1__ = 0; j_1__ < logA_man_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < logA_man_k_0_max__; ++k_0__) {
                        vars__.push_back(logA_man[k_0__](j_1__));
                    }
                }
                size_t logk_man_j_1_max__ = ntot_man;
                size_t logk_man_k_0_max__ = inc;
                for (size_t j_1__ = 0; j_1__ < logk_man_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < logk_man_k_0_max__; ++k_0__) {
                        vars__.push_back(logk_man[k_0__](j_1__));
                    }
                }
                size_t eq_rhs_j_1_max__ = ntot_man;
                size_t eq_rhs_k_0_max__ = inc;
                for (size_t j_1__ = 0; j_1__ < eq_rhs_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < eq_rhs_k_0_max__; ++k_0__) {
                        vars__.push_back(eq_rhs[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_master";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logk_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < logk_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logk" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A0_j_1_max__ = nx;
        size_t A0_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < A0_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < A0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A0" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t logn_j_1_max__ = nx;
        size_t logn_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < logn_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < logn_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logn" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sact_j_1_max__ = ntot_man;
        size_t Sact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Sact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Sact_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sact" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Wact_j_1_max__ = ntot_w;
        size_t Wact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Wact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Wact_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Wact" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t dApos_act_j_1_max__ = ntot_man;
        size_t dApos_act_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < dApos_act_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < dApos_act_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dApos_act" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eq_lhs_j_1_max__ = ntot_man;
            size_t eq_lhs_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < eq_lhs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < eq_lhs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eq_lhs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t logA_man_j_1_max__ = ntot_man;
            size_t logA_man_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < logA_man_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < logA_man_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logA_man" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t logk_man_j_1_max__ = ntot_man;
            size_t logk_man_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < logk_man_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < logk_man_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logk_man" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eq_rhs_j_1_max__ = ntot_man;
            size_t eq_rhs_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < eq_rhs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < eq_rhs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eq_rhs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logk_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < logk_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logk" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A0_j_1_max__ = nx;
        size_t A0_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < A0_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < A0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A0" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t logn_j_1_max__ = nx;
        size_t logn_k_0_max__ = inc;
        for (size_t j_1__ = 0; j_1__ < logn_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < logn_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logn" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Sact_j_1_max__ = ntot_man;
        size_t Sact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Sact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Sact_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sact" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Wact_j_1_max__ = ntot_w;
        size_t Wact_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < Wact_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Wact_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Wact" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t dApos_act_j_1_max__ = ntot_man;
        size_t dApos_act_k_0_max__ = (meas_err * inc);
        for (size_t j_1__ = 0; j_1__ < dApos_act_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < dApos_act_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dApos_act" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eq_lhs_j_1_max__ = ntot_man;
            size_t eq_lhs_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < eq_lhs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < eq_lhs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eq_lhs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t logA_man_j_1_max__ = ntot_man;
            size_t logA_man_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < logA_man_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < logA_man_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logA_man" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t logk_man_j_1_max__ = ntot_man;
            size_t logk_man_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < logk_man_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < logk_man_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logk_man" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eq_rhs_j_1_max__ = ntot_man;
            size_t eq_rhs_k_0_max__ = inc;
            for (size_t j_1__ = 0; j_1__ < eq_rhs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < eq_rhs_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eq_rhs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_master_namespace::model_master stan_model;
#endif
